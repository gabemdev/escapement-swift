/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: Escapement.proto
 *
 */

import Foundation
import SwiftProtobuf


struct ProtoEscapementElement: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtoEscapementElement"}
  public var protoMessageName: String {return "Element"}
  public var protoPackageName: String {return "hodinkee.protobuf.escapement"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "paragraph", swift: "paragraph"),
    2: .unique(proto: "ordered_list", json: "orderedList", swift: "orderedList"),
    3: .unique(proto: "unordered_list", json: "unorderedList", swift: "unorderedList"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtoEscapementElement
    var _kind = ProtoEscapementElement.OneOf_Kind()

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1, 2, 3: try _kind.decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      try _kind.traverse(visitor: visitor, start: 1, end: 4)
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _kind != other._kind {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._kind = _kind
      return clone
    }
  }

  private var _storage = _StorageClass()


  enum OneOf_Kind: ExpressibleByNilLiteral, SwiftProtobuf.OneofEnum {
    case paragraph(ProtoEscapementParagraph)
    case orderedList(ProtoEscapementOrderedList)
    case unorderedList(ProtoEscapementUnorderedList)
    case None

    static func ==(lhs: ProtoEscapementElement.OneOf_Kind, rhs: ProtoEscapementElement.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.paragraph(let l), .paragraph(let r)): return l == r
      case (.orderedList(let l), .orderedList(let r)): return l == r
      case (.unorderedList(let l), .unorderedList(let r)): return l == r
      case (.None, .None): return true
      default: return false
      }
    }

    public init(nilLiteral: ()) {
      self = .None
    }

    public init() {
      self = .None
    }

    public mutating func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      if self != .None && setter.rejectConflictingOneof {
        throw SwiftProtobuf.DecodingError.duplicatedOneOf
      }
      switch protoFieldNumber {
      case 1:
        var value: ProtoEscapementParagraph?
        try setter.decodeSingularMessageField(fieldType: ProtoEscapementParagraph.self, value: &value)
        if let value = value {
          self = .paragraph(value)
        }
      case 2:
        var value: ProtoEscapementOrderedList?
        try setter.decodeSingularMessageField(fieldType: ProtoEscapementOrderedList.self, value: &value)
        if let value = value {
          self = .orderedList(value)
        }
      case 3:
        var value: ProtoEscapementUnorderedList?
        try setter.decodeSingularMessageField(fieldType: ProtoEscapementUnorderedList.self, value: &value)
        if let value = value {
          self = .unorderedList(value)
        }
      default:
        self = .None
      }
    }

    public func traverse(visitor: SwiftProtobuf.Visitor, start: Int, end: Int) throws {
      switch self {
      case .paragraph(let v):
        if start <= 1 && 1 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      case .orderedList(let v):
        if start <= 2 && 2 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      case .unorderedList(let v):
        if start <= 3 && 3 < end {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      case .None:
        break
      }
    }
  }

  var paragraph: ProtoEscapementParagraph {
    get {
      if case .paragraph(let v) = _storage._kind {
        return v
      }
      return ProtoEscapementParagraph()
    }
    set {
      _uniqueStorage()._kind = .paragraph(newValue)
    }
  }

  var orderedList: ProtoEscapementOrderedList {
    get {
      if case .orderedList(let v) = _storage._kind {
        return v
      }
      return ProtoEscapementOrderedList()
    }
    set {
      _uniqueStorage()._kind = .orderedList(newValue)
    }
  }

  var unorderedList: ProtoEscapementUnorderedList {
    get {
      if case .unorderedList(let v) = _storage._kind {
        return v
      }
      return ProtoEscapementUnorderedList()
    }
    set {
      _uniqueStorage()._kind = .unorderedList(newValue)
    }
  }

  public var kind: OneOf_Kind {
    get {return _storage._kind}
    set {
      _uniqueStorage()._kind = newValue
    }
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtoEscapementElement) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct ProtoEscapementParagraph: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtoEscapementParagraph"}
  public var protoMessageName: String {return "Paragraph"}
  public var protoPackageName: String {return "hodinkee.protobuf.escapement"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "text", swift: "text"),
    2: .same(proto: "entities", swift: "entities"),
  ]


  ///   The paragraph's raw text. Required.
  var text: String = ""

  ///   The paragraph's associated entities. Optional.
  var entities: [ProtoEscapementEntity] = []

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &text)
    case 2: try setter.decodeRepeatedMessageField(fieldType: ProtoEscapementEntity.self, value: &entities)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if text != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: text, fieldNumber: 1)
    }
    if !entities.isEmpty {
      try visitor.visitRepeatedMessageField(value: entities, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: ProtoEscapementParagraph) -> Bool {
    if text != other.text {return false}
    if entities != other.entities {return false}
    return true
  }
}

struct ProtoEscapementOrderedList: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtoEscapementOrderedList"}
  public var protoMessageName: String {return "OrderedList"}
  public var protoPackageName: String {return "hodinkee.protobuf.escapement"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "items", swift: "items"),
  ]


  ///   The list's items. Required.
  var items: [ProtoEscapementParagraph] = []

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: ProtoEscapementParagraph.self, value: &items)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !items.isEmpty {
      try visitor.visitRepeatedMessageField(value: items, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: ProtoEscapementOrderedList) -> Bool {
    if items != other.items {return false}
    return true
  }
}

struct ProtoEscapementUnorderedList: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtoEscapementUnorderedList"}
  public var protoMessageName: String {return "UnorderedList"}
  public var protoPackageName: String {return "hodinkee.protobuf.escapement"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "items", swift: "items"),
  ]


  ///   The list's items. Required.
  var items: [ProtoEscapementParagraph] = []

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: ProtoEscapementParagraph.self, value: &items)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !items.isEmpty {
      try visitor.visitRepeatedMessageField(value: items, fieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: ProtoEscapementUnorderedList) -> Bool {
    if items != other.items {return false}
    return true
  }
}

struct ProtoEscapementEntity: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ProtoEscapementEntity"}
  public var protoMessageName: String {return "Entity"}
  public var protoPackageName: String {return "hodinkee.protobuf.escapement"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "tag", swift: "tag"),
    2: .same(proto: "position", swift: "position"),
    3: .same(proto: "attributes", swift: "attributes"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = ProtoEscapementEntity
    var _tag: String = ""
    var _position: ProtoEscapementEntity.Range? = nil
    var _attributes: Dictionary<String,String> = [:]

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_tag)
      case 2: try setter.decodeSingularMessageField(fieldType: ProtoEscapementEntity.Range.self, value: &_position)
      case 3: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_attributes)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _tag != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _tag, fieldNumber: 1)
      }
      if let v = _position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _attributes, fieldNumber: 3)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _tag != other._tag {return false}
      if _position != other._position {return false}
      if _attributes != other._attributes {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._tag = _tag
      clone._position = _position
      clone._attributes = _attributes
      return clone
    }
  }

  private var _storage = _StorageClass()


  ///   A half-closed interval, where possible values are
  ///   within [lower_bound, upper_bound).
  struct Range: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
    public var swiftClassName: String {return "ProtoEscapementEntity.Range"}
    public var protoMessageName: String {return "Range"}
    public var protoPackageName: String {return "hodinkee.protobuf.escapement"}
    public static let _protobuf_fieldNames: FieldNameMap = [
      1: .unique(proto: "lower_bound", json: "lowerBound", swift: "lowerBound"),
      2: .unique(proto: "upper_bound", json: "upperBound", swift: "upperBound"),
    ]


    var lowerBound: UInt32 = 0

    var upperBound: UInt32 = 0

    init() {}

    public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &lowerBound)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: &upperBound)
      default: break
      }
    }

    public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
      if lowerBound != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: lowerBound, fieldNumber: 1)
      }
      if upperBound != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt32.self, value: upperBound, fieldNumber: 2)
      }
    }

    public func _protoc_generated_isEqualTo(other: ProtoEscapementEntity.Range) -> Bool {
      if lowerBound != other.lowerBound {return false}
      if upperBound != other.upperBound {return false}
      return true
    }
  }

  ///   The HTML tag. Required.
  var tag: String {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  ///   The position of the entity within it's parent
  ///   paragraph's text. Required.
  var position: ProtoEscapementEntity.Range {
    get {return _storage._position ?? ProtoEscapementEntity.Range()}
    set {_uniqueStorage()._position = newValue}
  }
  public var hasPosition: Bool {
    return _storage._position != nil
  }
  public mutating func clearPosition() {
    return _storage._position = nil
  }

  ///   The associated attributes. Optional.
  var attributes: Dictionary<String,String> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: ProtoEscapementEntity) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
